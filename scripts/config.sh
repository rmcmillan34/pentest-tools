#!/bin/bash

###########################################
#---------------) Colors (----------------#
###########################################

C=$(printf '\033')
RED="${C}[1;31m"
SED_RED="${C}[1;31m&${C}[0m"
GREEN="${C}[1;32m"
SED_GREEN="${C}[1;32m&${C}[0m"
YELLOW="${C}[1;33m"
SED_YELLOW="${C}[1;33m&${C}[0m"
RED_YELLOW="${C}[1;31;103m"
SED_RED_YELLOW="${C}[1;31;103m&${C}[0m"
BLUE="${C}[1;34m"
SED_BLUE="${C}[1;34m&${C}[0m"
ITALIC_BLUE="${C}[1;34m${C}[3m"
LIGHT_MAGENTA="${C}[1;95m"
SED_LIGHT_MAGENTA="${C}[1;95m&${C}[0m"
LIGHT_CYAN="${C}[1;96m"
SED_LIGHT_CYAN="${C}[1;96m&${C}[0m"
LG="${C}[1;37m" #LightGray
SED_LG="${C}[1;37m&${C}[0m"
DG="${C}[1;90m" #DarkGray
SED_DG="${C}[1;90m&${C}[0m"
NC="${C}[0m"
UNDERLINED="${C}[5m"
ITALIC="${C}[3m"


# Function to prompt user for input and validate
get_user_input() {
    local prompt_message="$1"
    local variable_name="$2"
    local input

    while true; do
        read -p "$prompt_message: " input

        # Validate input (you can add more specific validation here if needed)
        if [ -z "$input" ]; then
            echo "Error: Input cannot be empty. Please enter a valid value."
        else
            break
        fi
    done

    # Export the validated input as an environment variable
    export "$variable_name"="$input"
}


# Function to confirm details with user
confirm_details() {
    echo
    echo "$BLUE""Please review the entered details:""$NC"
    echo "TARGET_IP: $TARGET_IP"
    echo "TARGET_NAME: $TARGET_NAME"
    echo "PLATFORM: $PLATFORM"
    export WD="$HOME/machines/${PLATFORM}/${TARGET_NAME}"
    echo "WD: $WD"
    echo

    while true; do
        read -p "$YELLOW""Are these details correct? (yes/no): ""$NC" confirmation
        case $confirmation in
            [Yy]* )
                echo "$GREEN""Details confirmed.$NC";
                break ;;
            [Nn]* )
                echo
                echo "Please re-enter the details:";
                setup_environment;  # Call setup_environment again to allow retry
                break ;;
            * )
                echo "Please answer yes or no." ;;
        esac
    done
}


# Function to create directories
create_directories() {
	echo "Creating directory ~/machines/${PLATFORM}/${TARGET_NAME}/nmap"
	mkdir -p ~/machines/${PLATFORM}/${TARGET_NAME}/nmap
	echo "Creating directory ~/machines/${PLATFORM}/${TARGET_NAME}/exfil"
	mkdir -p ~/machines/${PLATFORM}/${TARGET_NAME}/exfil
	echo "Changing directory to ~/machines/${PLATFORM}/${TARGET_NAME}"
	cd ~/machines/${PLATFORM}/${TARGET_NAME}
}


# Function to download potentially required tools/scripts/templates
download_tools() {
	# Download Report Template
	curl -o "${WD}/${TARGET_NAME}_writeup.md" https://raw.githubusercontent.com/rmcmillan34/pentest-tools/main/template.md
	
	# Downlaod LinPEAS/WinPEAS
	curl -o "${WD}/linpeas.sh" https://github.com/peass-ng/PEASS-ng/releases/download/20240616-43d0a061/linpeas.sh
	curl -o "/${WD}/winpeas.bat" https://github.com/peass-ng/PEASS-ng/releases/download/20240616-43d0a061/winPEAS.bat
}

# Function to write environment variables to file
write_env() {
	export ENV_FILE="${WD}/.${TARGET_NAME}_env"
	touch ${ENV_FILE}
	echo "export TARGET_IP=\"$TARGET_IP\"" > "$ENV_FILE"
	echo "export TARGET_NAME=\"$TARGET_NAME\"" >> "$ENV_FILE"
	echo "export PLATFORM=\"$PLATFORM\"" >> "$ENV_FILE"
}

# Function to setup environment variables
setup_environment() {
    get_user_input "Enter target name" "TARGET_NAME"
    get_user_input "Enter target IP address" "TARGET_IP"
    get_user_input "Enter platform" "PLATFORM"

    confirm_details
    create_directories
    download_tools
    write_env
}

# If this script is executed directly, run setup_environment
setup_environment
